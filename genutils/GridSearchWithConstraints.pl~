#!/usr/bin/env perl

use Math::Complex;
use Math::Trig;

sub usage {
  printf STDERR "\n";
  printf STDERR "usage:   for_flo.pl infile1\n It's not hard, idiot!!\n";
  printf STDERR "\n";
  exit 1;
}

use strict;     # vars must be declared before usage


#general grid parameters
my @GridCenter = ();
my $GridSize = 10;
my $GridSpacing = 0.1;


sub distance {             #function to determine the distance between two atoms

    my $Xdist = $_[0] - $_[3];
    my $Ydist = $_[1] - $_[4];
    my $Zdist = $_[2] - $_[5];

    my $SqXdist = $Xdist * $Xdist;
    my $SqYdist = $Ydist * $Ydist;
    my $SqZdist = $Zdist * $Zdist;

    my $dist = sqrt($SqXdist + $SqYdist + $SqZdist);
    return $dist;
}


sub angle {     #here be the function to determine the angle between two vectors


    my $vect1_length = sqrt(($_[0] * $_[0])+($_[1] * $_[1])+($_[2] * $_[2]));
    my $vect2_length = sqrt(($_[3] * $_[3])+($_[4] * $_[4])+($_[5] * $_[5]));
    #printf STDERR "vect1length: %.2f, vect2length: %.2f\n",$vect1_length,$vect2_length;
    my $vect1_2_dot_product = $_[0] * $_[3] + $_[1] * $_[4] + $_[2] * $_[5];
    my $angle = acos($vect1_2_dot_product/($vect1_length * $vect2_length));

    my $degangle = $angle * 57.295779513;
    
    if ($_[6] == 1) {return $angle; }
    else { return $degangle; }

}


while ($#ARGV>=0) {    # comment: $# means "index to last element of the array
  if ($ARGV[0] eq "-help" || $ARGV[0] eq "-h") {
    &usage();
  } 
  else {
      $GridCenter[0] = shift(@ARGV);
      $GridCenter[1] = shift(@ARGV);
      $GridCenter[0] = shift(@ARGV);
  }
}



for($xx = 
